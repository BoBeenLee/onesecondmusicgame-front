/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://34.84.5.51:8888".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface ResponseDTO
 */
export interface ResponseDTO {
    /**
     * 
     * @type {any}
     * @memberof ResponseDTO
     */
    body?: any;
    /**
     * 
     * @type {number}
     * @memberof ResponseDTO
     */
    status?: number;
}

/**
 * 
 * @export
 * @interface SongHighlightAddRequest
 */
export interface SongHighlightAddRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof SongHighlightAddRequest
     */
    highlightSeconds?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof SongHighlightAddRequest
     */
    songId?: number;
}

/**
 * 
 * @export
 * @interface SongRegisterRequest
 */
export interface SongRegisterRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof SongRegisterRequest
     */
    highlightSeconds?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof SongRegisterRequest
     */
    singerName?: string;
    /**
     * 
     * @type {string}
     * @memberof SongRegisterRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SongRegisterRequest
     */
    url?: string;
}

/**
 * 
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    accessId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    refreshToken?: string;
}

/**
 * 
 * @export
 * @interface UserSignUpRequest
 */
export interface UserSignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof UserSignUpRequest
     */
    accessId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUpRequest
     */
    deviceId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUpRequest
     */
    invitedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUpRequest
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignUpRequest
     */
    socialType?: string;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: any; }> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * HealthCheckControllerApi - fetch parameter creator
 * @export
 */
export const HealthCheckControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary healthCheck2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck2UsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/health/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckControllerApi - functional programming interface
 * @export
 */
export const HealthCheckControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary healthCheck2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck2UsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = HealthCheckControllerApiFetchParamCreator(configuration).healthCheck2UsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HealthCheckControllerApi - factory interface
 * @export
 */
export const HealthCheckControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary healthCheck2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck2UsingGET(options?: any) {
            return HealthCheckControllerApiFp(configuration).healthCheck2UsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * HealthCheckControllerApi - object-oriented interface
 * @export
 * @class HealthCheckControllerApi
 * @extends {BaseAPI}
 */
export class HealthCheckControllerApi extends BaseAPI {
    /**
     * 
     * @summary healthCheck2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckControllerApi
     */
    public healthCheck2UsingGET(options?: any) {
        return HealthCheckControllerApiFp(this.configuration).healthCheck2UsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * HeartControllerApi - fetch parameter creator
 * @export
 */
export const HeartControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary checkMyHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMyHeartUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/heart/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary useHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        useHeartUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/heart/use`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeartControllerApi - functional programming interface
 * @export
 */
export const HeartControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary checkMyHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMyHeartUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = HeartControllerApiFetchParamCreator(configuration).checkMyHeartUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary useHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        useHeartUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = HeartControllerApiFetchParamCreator(configuration).useHeartUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * HeartControllerApi - factory interface
 * @export
 */
export const HeartControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary checkMyHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkMyHeartUsingGET(options?: any) {
            return HeartControllerApiFp(configuration).checkMyHeartUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary useHeart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        useHeartUsingPUT(options?: any) {
            return HeartControllerApiFp(configuration).useHeartUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * HeartControllerApi - object-oriented interface
 * @export
 * @class HeartControllerApi
 * @extends {BaseAPI}
 */
export class HeartControllerApi extends BaseAPI {
    /**
     * 
     * @summary checkMyHeart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartControllerApi
     */
    public checkMyHeartUsingGET(options?: any) {
        return HeartControllerApiFp(this.configuration).checkMyHeartUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary useHeart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartControllerApi
     */
    public useHeartUsingPUT(options?: any) {
        return HeartControllerApiFp(this.configuration).useHeartUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * MusicUserControllerApi - fetch parameter creator
 * @export
 */
export const MusicUserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/user/myinfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/user/login/refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary secedeSelf
         * @param {string} password password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secedeSelfUsingDELETE(password: string, options: any = {}): FetchArgs {
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling secedeSelfUsingDELETE.');
            }
            const localVarPath = `/user/delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(password || {}) : (password || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signIn
         * @param {UserLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingPOST(request: UserLoginRequest, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling signInUsingPOST.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserLoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signUp
         * @param {UserSignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpUsingPOST(request: UserSignUpRequest, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling signUpUsingPOST.');
            }
            const localVarPath = `/user/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserSignUpRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MusicUserControllerApi - functional programming interface
 * @export
 */
export const MusicUserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = MusicUserControllerApiFetchParamCreator(configuration).getUserInfoUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = MusicUserControllerApiFetchParamCreator(configuration).refreshTokenUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary secedeSelf
         * @param {string} password password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secedeSelfUsingDELETE(password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = MusicUserControllerApiFetchParamCreator(configuration).secedeSelfUsingDELETE(password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary signIn
         * @param {UserLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingPOST(request: UserLoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = MusicUserControllerApiFetchParamCreator(configuration).signInUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary signUp
         * @param {UserSignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpUsingPOST(request: UserSignUpRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = MusicUserControllerApiFetchParamCreator(configuration).signUpUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MusicUserControllerApi - factory interface
 * @export
 */
export const MusicUserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary getUserInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingGET(options?: any) {
            return MusicUserControllerApiFp(configuration).getUserInfoUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenUsingPOST(options?: any) {
            return MusicUserControllerApiFp(configuration).refreshTokenUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary secedeSelf
         * @param {string} password password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secedeSelfUsingDELETE(password: string, options?: any) {
            return MusicUserControllerApiFp(configuration).secedeSelfUsingDELETE(password, options)(fetch, basePath);
        },
        /**
         * 
         * @summary signIn
         * @param {UserLoginRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingPOST(request: UserLoginRequest, options?: any) {
            return MusicUserControllerApiFp(configuration).signInUsingPOST(request, options)(fetch, basePath);
        },
        /**
         * 
         * @summary signUp
         * @param {UserSignUpRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpUsingPOST(request: UserSignUpRequest, options?: any) {
            return MusicUserControllerApiFp(configuration).signUpUsingPOST(request, options)(fetch, basePath);
        },
    };
};

/**
 * MusicUserControllerApi - object-oriented interface
 * @export
 * @class MusicUserControllerApi
 * @extends {BaseAPI}
 */
export class MusicUserControllerApi extends BaseAPI {
    /**
     * 
     * @summary getUserInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicUserControllerApi
     */
    public getUserInfoUsingGET(options?: any) {
        return MusicUserControllerApiFp(this.configuration).getUserInfoUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicUserControllerApi
     */
    public refreshTokenUsingPOST(options?: any) {
        return MusicUserControllerApiFp(this.configuration).refreshTokenUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary secedeSelf
     * @param {string} password password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicUserControllerApi
     */
    public secedeSelfUsingDELETE(password: string, options?: any) {
        return MusicUserControllerApiFp(this.configuration).secedeSelfUsingDELETE(password, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary signIn
     * @param {UserLoginRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicUserControllerApi
     */
    public signInUsingPOST(request: UserLoginRequest, options?: any) {
        return MusicUserControllerApiFp(this.configuration).signInUsingPOST(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary signUp
     * @param {UserSignUpRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicUserControllerApi
     */
    public signUpUsingPOST(request: UserSignUpRequest, options?: any) {
        return MusicUserControllerApiFp(this.configuration).signUpUsingPOST(request, options)(this.fetch, this.basePath);
    }

}

/**
 * RewardControllerApi - fetch parameter creator
 * @export
 */
export const RewardControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * type 광고 시청 : 'ad_movie', 노래 추천 : 'suggest_music'
         * @summary rewardHeart
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardForWatchingAdUsingPOST(type: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling rewardForWatchingAdUsingPOST.');
            }
            const localVarPath = `/reward/types/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardControllerApi - functional programming interface
 * @export
 */
export const RewardControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * type 광고 시청 : 'ad_movie', 노래 추천 : 'suggest_music'
         * @summary rewardHeart
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardForWatchingAdUsingPOST(type: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = RewardControllerApiFetchParamCreator(configuration).rewardForWatchingAdUsingPOST(type, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RewardControllerApi - factory interface
 * @export
 */
export const RewardControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * type 광고 시청 : 'ad_movie', 노래 추천 : 'suggest_music'
         * @summary rewardHeart
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardForWatchingAdUsingPOST(type: string, options?: any) {
            return RewardControllerApiFp(configuration).rewardForWatchingAdUsingPOST(type, options)(fetch, basePath);
        },
    };
};

/**
 * RewardControllerApi - object-oriented interface
 * @export
 * @class RewardControllerApi
 * @extends {BaseAPI}
 */
export class RewardControllerApi extends BaseAPI {
    /**
     * type 광고 시청 : 'ad_movie', 노래 추천 : 'suggest_music'
     * @summary rewardHeart
     * @param {string} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardControllerApi
     */
    public rewardForWatchingAdUsingPOST(type: string, options?: any) {
        return RewardControllerApiFp(this.configuration).rewardForWatchingAdUsingPOST(type, options)(this.fetch, this.basePath);
    }

}

/**
 * SongControllerApi - fetch parameter creator
 * @export
 */
export const SongControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addNewSong
         * @param {SongRegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSongUsingPOST(registerRequest: SongRegisterRequest, options: any = {}): FetchArgs {
            // verify required parameter 'registerRequest' is not null or undefined
            if (registerRequest === null || registerRequest === undefined) {
                throw new RequiredError('registerRequest','Required parameter registerRequest was null or undefined when calling addNewSongUsingPOST.');
            }
            const localVarPath = `/song/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SongRegisterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(registerRequest || {}) : (registerRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addSongHighlight
         * @param {SongHighlightAddRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSongHighlightUsingPOST(request: SongHighlightAddRequest, options: any = {}): FetchArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addSongHighlightUsingPOST.');
            }
            const localVarPath = `/song/highlight/new`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SongHighlightAddRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongControllerApi - functional programming interface
 * @export
 */
export const SongControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addNewSong
         * @param {SongRegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSongUsingPOST(registerRequest: SongRegisterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = SongControllerApiFetchParamCreator(configuration).addNewSongUsingPOST(registerRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary addSongHighlight
         * @param {SongHighlightAddRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSongHighlightUsingPOST(request: SongHighlightAddRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResponseDTO> {
            const localVarFetchArgs = SongControllerApiFetchParamCreator(configuration).addSongHighlightUsingPOST(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SongControllerApi - factory interface
 * @export
 */
export const SongControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary addNewSong
         * @param {SongRegisterRequest} registerRequest registerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSongUsingPOST(registerRequest: SongRegisterRequest, options?: any) {
            return SongControllerApiFp(configuration).addNewSongUsingPOST(registerRequest, options)(fetch, basePath);
        },
        /**
         * 
         * @summary addSongHighlight
         * @param {SongHighlightAddRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSongHighlightUsingPOST(request: SongHighlightAddRequest, options?: any) {
            return SongControllerApiFp(configuration).addSongHighlightUsingPOST(request, options)(fetch, basePath);
        },
    };
};

/**
 * SongControllerApi - object-oriented interface
 * @export
 * @class SongControllerApi
 * @extends {BaseAPI}
 */
export class SongControllerApi extends BaseAPI {
    /**
     * 
     * @summary addNewSong
     * @param {SongRegisterRequest} registerRequest registerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongControllerApi
     */
    public addNewSongUsingPOST(registerRequest: SongRegisterRequest, options?: any) {
        return SongControllerApiFp(this.configuration).addNewSongUsingPOST(registerRequest, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary addSongHighlight
     * @param {SongHighlightAddRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongControllerApi
     */
    public addSongHighlightUsingPOST(request: SongHighlightAddRequest, options?: any) {
        return SongControllerApiFp(this.configuration).addSongHighlightUsingPOST(request, options)(this.fetch, this.basePath);
    }

}

